" vim: set ft=vim:
"this is needed for little older vim.
" to remap tab keys.
" let &t_TI = "\<Esc>[>4;2m"
" let &t_TE = "\<Esc>[>4;m"

" Install/update plug----------- {{{
 if empty(glob('~/.vim/autoload/plug.vim'))
   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
 endif

call plug#begin('~/.vim/plugged')
    Plug 'junegunn/vim-plug'

    "Search Engines and File things
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

    " File Navigation
    Plug 'majutsushi/tagbar'
    Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle' }

    " Rust y plugins
    Plug 'rhysd/rust-doc.vim'
    Plug 'rust-lang/rust.vim'
    Plug 'cespare/vim-toml'

    " Tables and formatting
    Plug 'dhruvasagar/vim-table-mode'
    Plug 'junegunn/vim-easy-align'
    Plug 'godlygeek/tabular'
    "
    " Completion and Debugging. Programming in general.
" Commands to buildyoucompleteme:
" git submodule update init -- recursive
" python3 install.py --clangd-completer --rust-completer
    Plug '~/.vim/plugged/YouCompleteMe', {'on': 'YcmRestartServer'}
    Plug 'puremourning/vimspector'
    " Plug 'sagi-z/vimspectorpy'
    Plug 'ilyachur/cmake4vim'
    "
    " vim Candy
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    "Plug 'mhinz/vim-startify'
    " devicons break things on tmux and ssh and kitty...
    " Plug 'ryanoasis/vim-devicons'
    Plug 'thaerkh/vim-indentguides'

    "tpope plugins
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'
    Plug 'https://tpope.io/vim/unimpaired'
    Plug 'https://tpope.io/vim/fugitive'
    Plug 'tpope/vim-speeddating'
    Plug 'tpope/vim-dispatch'
    Plug 'tpope/vim-abolish'

    " Text writing plugins
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug'], 'on': 'MarkdownPreviewToggle'}
    Plug 'lervag/vimtex'
    Plug 'dbmrq/vim-ditto'
    " requires Abolish
    Plug 'jdelkins/vim-correction'

    " Snippets and accelerators
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    " makes python available in snippets
    Plug 'reconquest/vim-pythonx'
    Plug 'Shougo/vimproc.vim', {'do' : 'make'}
    Plug 'scrooloose/nerdcommenter'
    " Supercharges tab key. not sure if i like that
    " Plug 'ervandew/supertab'

    " tmux
    Plug 'jpalardy/vim-slime', {'branch':'main'}
    Plug 'christoomey/vim-tmux-navigator'

    " Notes.maybe add taskwarrior here again or so.
    Plug 'vimwiki/vimwiki'

call plug#end()
 " }}}

" General Settings----------- {{{
syntax on
filetype plugin indent on
set autoread
set autochdir " make current file's directory current working directory

" leader keys----------- {{{
let mapleader=","
let maplocalleader=",,"
" }}}

set nocompatible              " required
set hidden
set showtabline=2
" uses a caseinsensitive search unless caps are
" put inside search string
set ignorecase "required for smartcase
set smartcase

set encoding=utf-8
" set background=dark
" colorscheme wombat256mod
" colorscheme gruvbox "wombat256mod
" colorscheme solarized
" These settings somewhat look very weird when using plain solarized theme
highlight CursorLine term=bold
highlight CursorLine cterm=bold
highlight CursorLine ctermbg=lightred
highlight Pmenu ctermfg=darkblue
highlight Search ctermbg=3

 let g:airline_theme='minimalist'                " set airline theme
 let g:airline_powerline_fonts = 1

 set shell=/bin/bash

 " Display linenumbers.
 set number
 set relativenumber
 augroup numbertoggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
 augroup END

 set ttyfast                                 " terminal acceleration
 set lazyredraw

 set tabstop=4                               " 4 whitespaces for tabs visual presentation
 set shiftwidth=4                            " shift lines by 4 spaces
 set smarttab                                " set tabs for a shifttabs logic
 set expandtab                               " expand tabs into spaces
 set autoindent                              " indent when moving to the next line while writing code
 " ============ open splits on the bottom or to the right =================
 set splitright
 set splitbelow

 set cursorline                              " shows line under the cursor's line
 set showmatch                               " shows matching part of bracket pairs (), [], {}

 set backup 	                            " no backup files
 set writebackup                            " only in case you don't want a backup file while editing
 set backupdir=~/.vim/.vim_backup_files          "backup files go here...
 set noswapfile 	                        " no swap files
 set undofile
"and undo here. This will
" hopefully declutter all my projects
 set undodir=~/.vim/.vim_undofiles

 set backspace=indent,eol,start              " backspace removes all (indents, EOLs, start) What is start?

 set scrolloff=10                            " let 10 lines before/after cursor during scroll

 set clipboard=unnamed                       " use system clipboard

 " set switchbuf=useopen
 " always have statusbar
 set laststatus=2
 set incsearch	                            " incremental search
 set hlsearch	                            " highlight search results
 " indent guide settings
 set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

 augroup vim_markdown
     autocmd!
     autocmd BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md set ft=markdown
 augroup END
 " }}}

 " Tagbar settings----------- {{{
 nnoremap <F8> :TagbarToggle<CR>
 let g:tagbar_autofocus=1
 let g:tagbar_width=42

 let g:tagbar_type_json = {
     \ 'ctagstype' : 'json',
     \ 'kinds' : [
       \ 'o:objects',
       \ 'a:arrays',
       \ 'n:numbers',
       \ 's:strings',
       \ 'b:booleans',
       \ 'z:nulls'
     \ ],
   \ 'sro' : '.',
     \ 'scope2kind': {
     \ 'object': 'o',
       \ 'ARRAY': 'a',
       \ 'number': 'n',
       \ 'string': 's',
       \ 'boolean': 'b',
       \ 'null': 'z'
     \ },
     \ 'kind2scope': {
     \ 'o': 'object',
       \ 'a': 'array',
       \ 'n': 'number',
       \ 's': 'string',
       \ 'b': 'boolean',
       \ 'z': 'null'
     \ },
     \ 'sort' : 0
     \ }
 " }}}

 ""NERDTree settings ----------- {{{
 let NERDTreeIgnore=['\.pyc$', '\.pyo$', '__pycache__$']     " Ignore files in NERDTree
 let NERDTreeWinSize=40
 " toggle nerdtree on cn...
 nnoremap <C-n> :NERDTreeToggle<CR><C-C>
 " }}}

 " JuneGunn.EasyAlign ----------- {{{
 xmap ga <Plug>(EasyAlign)
 nmap ga <Plug>(EasyAlign)
 " }}}

 " Some autocommands...----------- {{{
 " highlight 'long' lines (>= 80 symbols) in python files
 augroup vimrc_autocmds
     autocmd!
     autocmd FileType python,rst,c,cpp highlight Excess ctermbg=DarkGrey guibg=Black
     " write txt files no matter they contain content
     autocmd BufNewFile *.txt :write
     " start new files in insert mode
     " interferes with tagbar...
     " autocmd BufNewFile * :startinsert
     " Disable wrapping for html
     autocmd BufNewFile,BufRead *.html setlocal nowrap
     "(re)indent html files on saving
     autocmd BufWritePre,BufRead *.html :normal gg=G
     autocmd FileType python,rst,c,cpp set nowrap
     " set comulmnmarker to 88 as recommended by black...
     autocmd FileType python,rst,c,cpp set colorcolumn=88
     " python define function or class snippets
     autocmd FileType cpp        :iabbrev <buffer> irv ito::RetVal
     autocmd FileType cpp        :iabbrev <buffer> rv retVal
     autocmd FileType cpp,python :iabbrev <buffer> rr return
     autocmd StdinReadPre * let g:isReadingFromStdin = 1

     " Start with startify as startscreen and NERDTree
     " when not directly opening some file
     autocmd VimEnter * nested if !argc() && !exists('g:isReadingFromStdin') | Startify | endif
     " autocmd VimEnter * nested if !argc() && !exists('g:isReadingFromStdin') | NERDTree | endif

     autocmd BufWritePre * %s/\s\+$//e
 augroup END
 " }}}

 " YouCompleteMe Settings----------- {{{
 nnoremap <leader>g :YcmCompleter GoTo<CR>
 nnoremap <leader>j :YcmCompleter GoToReferences<CR>
 nnoremap <leader>yf :YcmCompleter FixIt<CR>
 nnoremap <leader>yF :YcmCompleter Format<CR>
 nnoremap <leader>K :YcmCompleter GetDoc<CR>
 nnoremap <leader>R :YcmCompleter RefactorRename<CR>
 nnoremap <leader>r :YcmRestartServer<CR>
 "toggle hints, use nmap instead of nnoremap when using plug
 nmap <leader>D <plug>(YCMHover)
 "
 "always use the recommended parameters for rls completer...
 let g:ycm_confirm_extra_conf = 0
 let g:ycm_extra_conf_globlist = [$HOME."/rust_projects/*"]
 let g:ycm_enable_diagnostic_signs = 1
 let g:ycm_enable_diagnostic_highlighting = 1
 let g:ycm_always_populate_location_list = 1
 let g:ycm_open_loclist_on_ycm_diags = 1

 let g:ycm_key_invoke_completion = '<C-a>'
 let g:ycm_key_list_select_completion = ['<Down>', '<C-n>', '<C-j>']
 let g:ycm_key_list_previous_completion = ['<Up>', '<C-p>', '<C-k>']

 " let g:SuperTabDefaultCompletionType = '<C-n>'
 let g:ycm_complete_in_comments = 1
 let g:ycm_seed_identifiers_with_syntax = 1
 let g:ycm_collect_identifiers_from_comments_and_strings = 1
 let g:ycm_language_server =
 \ [
 \   {
 \     'name': 'rust',
 \     'cmdline': ['rust-analyzer'],
 \     'filetypes': ['rust'],
 \     'project_root_files': ['Cargo.toml']
 \   }
 \ ]
 " this is for autocompletion in vimspector
 let g:ycm_semantic_triggers =
 \{
 \ 'VimspectorPrompt':
 \[ '.', '->', ':', '<' ]
 \}
 let g:ycm_filetype_blacklist = {}
 " }}}

 " Ultisnips settings----------- {{{
 " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
 let g:UltiSnipsListSnippets='<c-l>'
 let g:UltiSnipsJumpForwardTrigger='<TAB>'
 let g:UltiSnipsJumpBackwardTrigger='<S-TAB>'
 let g:UltiSnipsExpandTrigger='<TAB>'
 " let g:UltiSnipsJumpForwardTrigger='<c-j>'
 " let g:UltiSnipsJumpBackwardTrigger='<c-k>'
 " let g:UltiSnipsExpandTrigger='<c-w>'
 let g:UltiSnipsSnippetDirectories = ["~/.vim/bundle/vim-snippets/UltiSnips/"]
 " If you want :UltiSnipsEdit to split your window.
 let g:UltiSnipsEditSplit='vertical'
 "" }}}

 " Slime Settings ----------- {{{
 " this one is helpful for ssh sessions and such, keybindings for
 " tmus start with <C-b>; a vert split is '%' a hor split is '"' for example
 let g:slime_target = 'tmux'
 let g:slime_default_config = {'socket_name': 'default', 'target_pane': '{last}'}
 " let g:slime_target = 'vimterminal'
 " let g:slime_vimterminal_config = {options}
 " let g:slime_vimterminal_cmd = 'command'
 " put the delimiter  parts in the corresponding ftplugin
 "let g:slime_cell_delimiter = '#%%'
 " nmap <leader>s <Plug>SlimeSendCell
 "
 " }}}

 " remove this, if junegunns easyalign works for markdown tables Tabular mapping, common to all files----------- {{{
 if exists(":Tabularize")
     " aligns along '='
     nmap <Leader>a= :Tabularize /=<CR>
     vmap <Leader>a= :Tabularize /=<CR>
     " align along ':'
     nmap <Leader>a: :Tabularize /:\zs<CR>
     vmap <Leader>a: :Tabularize /:\zs<CR>
     " aligns along '|'
     nmap <Leader>a<Bar> :Tabularize /<Bar>\zs<CR>
     vmap <Leader>a<Bar> :Tabularize /<Bar>\zs<CR>
 endif
 " }}}

 " adding a semicolon to the end of the line
 nnoremap <leader>; :execute "normal! mqA;\e`q"<CR>

" Grepping current word
nnoremap gw :grep <cword> . <CR>
if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

 " vimrc management----------- {{{
 nnoremap <leader>ev     :vs $MYVIMRC<CR>
 nnoremap <leader>sv     :source $MYVIMRC<CR>
" automatically source vimrc
augroup vimr_autosource
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | echom "Reloaded $MYVIMRC"
augroup END
 " }}}

 " spacebar folding----------- {{{
 nnoremap <space>        za
 nnoremap <leader>c0     :set conceallevel=0<CR>
 nnoremap <leader>c1     :set conceallevel=1<CR>
 nnoremap <leader>c2     :set conceallevel=2<CR>
 nnoremap <leader>f0     :set foldlevel=0<CR>
 nnoremap <leader>f1     :set foldlevel=1<CR>
 nnoremap <leader>f2     :set foldlevel=2<CR>
 nnoremap <leader>f3     :set foldlevel=3<CR>
 nnoremap <leader>f4     :set foldlevel=4<CR>
 nnoremap <leader>f5     :set foldlevel=5<CR>
 " }}}

 " " abbreviations, common----------- {{{
 " Should be handled by vim-abolish
 " iabbrev tehn then
 " iabbrev tahn than
 " iabbrev adn and
 " iabbrev waht what
 " iabbrev isntall install
 " " }}}

 " operator remapping" ----------- {{{
 " parenthesis
 onoremap p i(
 " delete function body
 onoremap b /return<CR>
 " change contents of next parenthesis(
 onoremap in( :<c-u>normal! f(vi(<CR>
 " change contents of last parenthesis
 onoremap il( :<c-u>normal! F)vi(<CR>
 " change including parenthesis
 onoremap an( :<c-u>normal! f(va(<CR>
 onoremap an( :<c-u>normal! F(va(<CR>
 " change inside curly braces
 onoremap in{ :<c-u>normal! f{vi{<CR>
 onoremap il{ :<c-u>normal! F{vi{<CR>
 " change including curly braces
 onoremap an{ :<c-u>normal! f{va{<CR>
 onoremap al{ :<c-u>normal! F{va{<CR>

 " This autocorrects when in insertmode the last error by the
 " first suggestion
 inoremap <leader>l <c-g>u<ESC>[s1z=`]a<c-g>u
 " " }}}

 " Function Key mappings----------- {{{
 nnoremap <leader><F3> :Rg<CR>
 nnoremap <leader>b :Buffers<CR>
 nnoremap <F4> :set relativenumber!<CR>
 nnoremap <leader>f :Files<CR>
 nnoremap <leader>F :Files ~<CR>
 " " }}}

 " Buffer Management----------- {{{
 set wildmode=list:full
 set wildignorecase
 set wildignore=*.swp,*.bak
 set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
 set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
 set wildignore+=tags
 set wildignore+=*.tar.*
 set wildcharm=<C-z>
 " This one opens a tabbable list to scroll through open buffers

 set path=.,**

 " nnoremap <localleader>f :find *
 " nnoremap <localleader>s :sfind *
 " nnoremap <localleader>v :vert sfind *
 " nnoremap <localleader>t :tabfind *

 " nnoremap <leader>F: find <C-R>=expand('%:h').'/*'<CR>
 " nnoremap <leader>S: sfind <C-R>=expand('%:h').'/*'<CR>
 " nnoremap <leader>V: vert sfind <C-R>=expand('%:h').'/*'<CR>
 " nnoremap <leader>T: tabfind <C-R>=expand('%:h').'/*'<CR>

 " This sets marks to jump back to the last modified file
 " with given filename/Ending

 augroup automarks
   autocmd!
   autocmd BufLeave *.cpp  normal! mC
   autocmd BufLeave *.h normal! mH
   autocmd BufLeave *.rs   normal! mR
   autocmd BufLeave *.py  normal! mP
 augroup END

 " new vertical split can be opened using ctrl-w t
 " }}}

 " Vimscript filetype settings -------------------- {{{
 augroup filteype_vim
     autocmd FileType lua setlocal foldmethod=marker
 augroup END
 " }}}

 " vimspector----------- {{{
 " let g:vimspector_enable_mappings = 'HUMAN'

 " These are the possible vimspector keymappings
 " Human binds them to the F-Keys(somewhat opinionated...)
 " This makes the mouse work on the Winbar which pops up on starting vimspector
 " set mouse=a

 nmap <F5> <Plug>VimspectorContinue
 nmap <leader><F5> :VimspectorReset<CR>

 nmap <F6> <Plug>VimspectorPause
 nmap <leader><F6> <Plug>VimspectorStop

 nmap <F9> <Plug>VimspectorToggleBreakpoint
 nmap <leader><F9> <Plug>VimspectorToggleConditionalBreakpoint
 " <Plug>VimspectorAddFunctionBreakpoint
 nmap <F10> <Plug>VimspectorStepOver
 nmap <leader><F10> <Plug>VimspectorStepInto
 nmap <F12> <Plug>VimspectorStepOut
 nmap <leader><F12> <Plug>VimspectorRunToCursor
 "this is for autocompletion in watch window
 let g:ycm_semantic_triggers =  { 'VimspectorPrompt': [ '.', '->', ':', '<' ] }
 " }}}

 " vimwiki----------- {{{
 function! VimwikiFindIncompleteTasks()
     lvimgrep /- \[ \]/ %:p
     lopen
 endfunction

 function! VimwikiFindAllIncompleteTasks()
     VimwikiSearch /- \[[^X]\]/
     lopen
 endfunction

 nmap <Leader>wa :call VimwikiFindAllIncompleteTasks()<CR>
 nmap <Leader>wx :call VimwikiFindIncompleteTasks()<CR>

 let g:vimwiki_list = [{'path' : '~/ownCloud/Notes/', 'syntax' : 'markdown', 'ext': '.md'}]
 " Only treat md within the NOtes folder as vimwikifiles
 let g:vimwiki_global_ext = 0
 "
 " disable tab mappigns for vimwiki
 let g:vimwiki_table_mappings=0
 function! VimwikiLinkHandler(link)
     " Use Vim to open external files with the 'vfile:' scheme.  E.g.:
     "   1) [[vfile:~/Code/PythonProject/abc123.py]]
     "   2) [[vfile:./|Wiki Home]]
     let link = a:link
     if link =~# '^vfile:'
	 let link = link[1:]
     else
	 return 0
     endif
     let link_infos = vimwiki#base#resolve_link(link)
     if link_infos.filename == ''
	 echomsg 'Vimwiki Error: Unable to resolve link!'
	 return 0
     else
	 exe 'edit ' . fnameescape(link_infos.filename)
	 return 1
     endif
 endfunction
 " " }}}

 " fzf configuration----------- {{{

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

 let g:fzf_action = {
   \ 'ctrl-t': 'tab split',
   \ 'ctrl-x': 'split',
   \ 'ctrl-v': 'vsplit' }

 " Enable per-command history.
 " CTRL-N and CTRL-P will be automatically bound to next-history and
 " previous-history instead of down and up. If you don't like the change,
 " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
 let g:fzf_history_dir = '~/.local/share/fzf-history'

 let g:fzf_tags_command = 'ctags -R'
 " Border color
 let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }
 " let g:fzf_layout = { 'window': 'vs' }
 let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
 let $FZF_DEFAULT_COMMAND="rg --files --hidden"


 " Customize fzf colors to match your color scheme
 " let g:fzf_colors =
 " \ { 'fg':      ['fg', 'Normal'],
 "   \ 'bg':      ['bg', 'Normal'],
 "   \ 'hl':      ['fg', 'Comment'],
 "   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
 "   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
 "   \ 'hl+':     ['fg', 'Statement'],
 "   \ 'info':    ['fg', 'PreProc'],
 "   \ 'border':  ['fg', 'Ignore'],
 "   \ 'prompt':  ['fg', 'Conditional'],
 "   \ 'pointer': ['fg', 'Exception'],
 "   \ 'marker':  ['fg', 'Keyword'],
 "   \ 'spinner': ['fg', 'Label'],
 "   \ 'header':  ['fg', 'Comment'] }

 "Get Files
 command! -bang -nargs=? -complete=dir Files
     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


 " Get text in files with Rg
 command! -bang -nargs=* Rg
   \ call fzf#vim#grep(
   \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
   \   fzf#vim#with_preview(), <bang>0)

 " Ripgrep advanced
 function! RipgrepFzf(query, fullscreen)
   let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
   let initial_command = printf(command_fmt, shellescape(a:query))
   let reload_command = printf(command_fmt, '{q}')
   let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
   call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
 endfunction

 command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

 " Git grep
 command! -bang -nargs=* GGrep
   \ call fzf#vim#grep(
   \   'git grep --line-number '.shellescape(<q-args>), 0,
   \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
 """"""""""""""
 " }}}
 "
 " IndentGuides----------- {{{
 let g:indentguides_spacechar = '┆'
 let g:indentguides_tabchar = '|'
 " " }}}

 "vim-correction  ----------- {{{
let g:correction_filetypes=[
            \'text', 'markdown', 'gitcommit',
            \'vimwiki', "plaintex", "tex", "latex",
            \"plaintex", "rst", "pandoc"
            \]

nnoremap <leader>A :e~/.vim/plugged/vim-correction/after/plugin/correction.vim<CR>

 " }}}

 " This one opens current file in vscode.
 " Awesome idea taken from Open in Vim extension
 " Does not work properly for Debugging as some folder also has to be opened
:command! OpenInVSCode exe "silent !code --goto '" . expand("%") . ":" . line(".") . ":" . col(".") . "'" | redraw!

" remapping movement to be more consistent----------- {{{

imap <C-j> <C-n>
imap <C-k> <C-p>
cmap <C-j> <C-n>
cmap <C-k> <C-p>
" }}}

" put esc on jk----------- {{{
xnoremap jk  <ESC>
xnoremap <ESC> <nop>
inoremap jk  <ESC>
inoremap <ESC> <nop>
" }}}

" tab remapping. And tpope unimpaired recommendations----------- {{{
" recommended from tpope in unimpaired.vir
nmap < [
nmap > ]
xmap < [
xmap > ]
omap < [
omap > ]
nmap << [[
nmap >> ]]
xmap << [[
xmap >> ]]
omap << [[
omap >> ]]
"
"care when mapping tab keys
" https://vi.stackexchange.com/questions/16161/how-to-map-c-i-separate-from-tab#23344
" https://unix.stackexchange.com/questions/631241/mapping-otherwise-conflicting-or-unmappable-keys-in-terminal-vim
" https://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim/
" nnoremap <C-i> :echom "C-i was pressed"<cr>
nnoremap <C-I> <C-I>
nnoremap <S-Tab> <<
nnoremap <Tab> >>

" nnoremap <tab> :echom "Tab was pressed"<cr>'

" augroup fix-ultisnips-overriding-tab-visual-selection
"     autocmd!
"     autocmd VimEnter * xnoremap <Tab> >gv
"     autocmd VimEnter * xnoremap <S-Tab> <gv
" augroup END

" }}}

" Abolish----------- {{{
let g:abolish_save_file="~/.vim/abolish.save"
" }}}
