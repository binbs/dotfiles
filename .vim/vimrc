" vim: set ft=vim:

" Install/update plug----------- {{{
 if empty(glob('~/.vim/autoload/plug.vim'))
   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
 endif

call plug#begin('~/.vim/plugged')
    Plug 'junegunn/vim-plug'
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
    Plug 'mhinz/vim-startify'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
call plug#end()
 " }}}

" Pathogen ----------- {{{
" FZF shadows the :Helptags, but it still can be done using
" :call pathogen#helptags()
call pathogen#infect()
call pathogen#helptags()
" }}}

" General Settings----------- {{{
syntax on
filetype plugin indent on
set autoread

set nocompatible              " required
set hidden
" disabled in favor of ctrl-space
set showtabline=0
" uses a caseinsensitive search unless caps are
" put inside search string
set ignorecase "required for smartcase
set smartcase
set conceallevel=0 "usefful for latex, hides $ signs and such things...

if filereadable(expand("~/.vimrc_background"))
  source ~/.vimrc_background
endif
set encoding=utf-8
set t_Co=256                                " 256 colors
colorscheme wombat256mod
colorscheme gruvbox "wombat256mod
set guifont=mononoki\ Nerd\ Font\ 18

let g:airline_theme='minimalist'                " set airline theme
let g:airline_powerline_fonts = 1

source ~/.vim_mapping

set shell=/bin/bash

set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set ruler

set ttyfast                                 " terminal acceleration

set tabstop=4                               " 4 whitespaces for tabs visual presentation
set shiftwidth=4                            " shift lines by 4 spaces
set smarttab                                " set tabs for a shifttabs logic
set expandtab                               " expand tabs into spaces
set autoindent                              " indent when moving to the next line while writing code
" ============ open splits on the bottom or to the right =================
set splitright
set splitbelow

set cursorline                              " shows line under the cursor's line
set showmatch                               " shows matching part of bracket pairs (), [], {}

set nobackup 	                            " no backup files
set nowritebackup                           " only in case you don't want a backup file while editing
set noswapfile 	                            " no swap files

set backspace=indent,eol,start              " backspace removes all (indents, EOLs, start) What is start?

set scrolloff=10                            " let 10 lines before/after cursor during scroll

set clipboard=unnamed                       " use system clipboard

" set exrc                                    " enable usage of additional .vimrc files from working directory
" set secure                                  " prohibit .vimrc files to execute shell, create files, etc...

" this is from some thoughtbot tutorial and resizes the currently active
" 'window' to be as large as possible
" set winwidth=84
" set winheight=5
" set winminheight=5
" set winheight=999
"
" " some tab mod...
" tab sball
" some ...tab modifier. not sure what this does
" set switchbuf=useopen
" always have statusbar
set laststatus=2
set incsearch	                            " incremental search
set hlsearch	                            " highlight search results
" indent guide settings
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

augroup vim_markdown
    autocmd!
    autocmd BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md set ft=markdown
augroup END

" }}}

" Tagbar settings----------- {{{
let g:tagbar_autofocus=1
let g:tagbar_width=42

let g:tagbar_type_json = {
    \ 'ctagstype' : 'json',
    \ 'kinds' : [
      \ 'o:objects',
      \ 'a:arrays',
      \ 'n:numbers',
      \ 's:strings',
      \ 'b:booleans',
      \ 'z:nulls'
    \ ],
  \ 'sro' : '.',
    \ 'scope2kind': {
    \ 'object': 'o',
      \ 'ARRAY': 'a',
      \ 'number': 'n',
      \ 'string': 's',
      \ 'boolean': 'b',
      \ 'null': 'z'
    \ },
    \ 'kind2scope': {
    \ 'o': 'object',
      \ 'a': 'array',
      \ 'n': 'number',
      \ 's': 'string',
      \ 'b': 'boolean',
      \ 'z': 'null'
    \ },
    \ 'sort' : 0
    \ }
" }}}

""NERDTree settings ----------- {{{
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '__pycache__$']     " Ignore files in NERDTree
let NERDTreeWinSize=40
" toggle nerdtree on cn...
nnoremap <C-n> :NERDTreeToggle<CR><C-C>
" }}}

" NERDCommenter settings" ----------- {{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
" let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/*/','right': '/*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" }}}

" Some autocommands...----------- {{{

" highlight 'long' lines (>= 80 symbols) in python files
augroup vimrc_autocmds
    autocmd!
    autocmd FileType python,rst,c,cpp highlight Excess ctermbg=DarkGrey guibg=Black
    " write txt files no matter they contain content
    autocmd BufNewFile *.txt :write
    " start new files in insert mode
    " interferes with tagbar...
    " autocmd BufNewFile * :startinsert
    " Disable wrapping for html
    autocmd BufNewFile,BufRead *.html setlocal nowrap
    "(re)indent html files on saving
    autocmd BufWritePre,BufRead *.html :normal gg=G
    autocmd FileType python,rst,c,cpp set nowrap
    " set comulmnmarker to 88 as recommended by black...
    autocmd FileType python,rst,c,cpp set colorcolumn=88
    " python define function or class snippets
    autocmd FileType cpp        :iabbrev <buffer> irv ito::RetVal
    autocmd FileType cpp        :iabbrev <buffer> rv retVal
    autocmd FileType cpp,python :iabbrev <buffer> rr return
    autocmd StdinReadPre * let g:isReadingFromStdin = 1

    " Start with startify as startscreen and NERDTree
    " when not directly opening some file
    autocmd VimEnter * nested if !argc() && !exists('g:isReadingFromStdin') | Startify | endif
    autocmd VimEnter * nested if !argc() && !exists('g:isReadingFromStdin') | NERDTree | endif

    autocmd BufWritePre * %s/\s\+$//e
augroup END
" }}}

" YouCompleteMe Settings----------- {{{
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>G :YcmCompleter GoToDefinition<CR>
nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>D :YcmCompleter GoToImplementation<CR>
nnoremap <leader>j :YcmCompleter GoToReferences<CR>
nnoremap <leader>f :YcmCompleter FixIt<CR>
nnoremap <leader>F :YcmDiag<CR>
" nnoremap <leader>F :YcmCompleter Format<CR>
" nnoremap <leader>E :YcmCompleter ExecuteCommand<CR>
nnoremap <leader>K :YcmCompleter GetDoc<CR>
nnoremap <leader>R :YcmCompleter RefactorRename<CR>
nnoremap <localleader>r :YcmCompleter RestartServer<CR>
"toggle hints, use nmap instead of nnoremap when using plug
nmap <leader>D <plug>(YCMHover)
"always use the recommended parameters for rls completer...
let g:ycm_extra_conf_globlist = ["~/rust_projects/*"]
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_open_loclist_on_ycm_diags = 1

let g:ycm_key_invoke_completion = '<C-a>'

let g:ycm_complete_in_comments = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" }}}

" Ultisnips settings----------- {{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsListSnippets='<c-l>'
let g:UltiSnipsJumpForwardTrigger='<c-k>'
let g:UltiSnipsJumpBackwardTrigger='<c-j>'
let g:UltiSnipsExpandTrigger='<c-k>'
let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/bundle/vim-snippets/UltiSnips/']
" let g:UltiSnipsSnippetDirectories=['UltiSnips']
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'
"" }}}

" Slime Settings ----------- {{{
" this one is helpful for ssh sessions and such, keybindings for
" tmus start with <C-b>; a vert split is '%' a hor split is '"' for example
" let g:slime_target = 'tmux'
" let g:slime_default_config = {'socket_name': 'default', 'target_pane': '{last}'}
let g:slime_target = 'vimterminal'
" let g:slime_vimterminal_config = {options}
" let g:slime_vimterminal_cmd = 'command'
" put the delimiter  parts in the corresponding ftplugin
"let g:slime_cell_delimiter = '#%%'
" nmap <leader>s <Plug>SlimeSendCell
"
" }}}

" Tabular mapping, common to all files----------- {{{
if exists(":Tabularize")
    " aligns along '='
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    " align along ':'
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
    " aligns along '|'
    nmap <Leader>a<Bar> :Tabularize /<Bar>\zs<CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar>\zs<CR>
endif
" }}}

" Termdebugger----------- {{{
" These settings are very project-local and need to be highly customized for
" :Termdebug...
" let termdebugger = ""

